
160202034 - Ata Gülalan
160202015 - Oğuzhan Türker

----------------------------------------------------------------------------------------------------------------------
----------------------------------------------------- /readme.MD -----------------------------------------------------
----------------------------------------------------------------------------------------------------------------------

# PuzzleJS
🧩 Yazılım Laboratuvarı 2 - Proje 1

## Başlarken

Bu talimatlar size projenin bir kopyasını verecektir.

### Gereklilikler

Bilgisayarınızda [NodeJS](https://nodejs.org/en/download/) olması gerekiyor.

### Kurulum

Devam etmeden önce npm paketlerini yüklemeniz gerekir.

```
npm install -g nodemon
npm install
```

paketleri yükledikten sonra yapmanız gereken tek şey

```
npm start
```

yapmak.

Varsayılan olarak, 4540 merkez bağlantı noktasında çalışır. Bunu `index.js` dosyasından değiştirebilirsiniz.

`localhost:4540` adresinden uygulamaya ulaşabilirsiniz.

İyi eğlenceler!


## Yapılandırma

* [NodeJS](https://nodejs.org/en/) - Chrome'un V8 JavaScript Motorunu temel alan JavaScript çalışma zamanı

## Yazarlar

* **Ata Gülalan** - *İlk İş* - [atagulalan](https://github.com/atagulalan)
* **Oğuzhan Türker** - *İlk İş* - [oguzturker8](https://github.com/oguzturker8)

## Lisans

* MIT

-------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------- /package.json -----------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------

{
  "name": "puzzlejs",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "nodemon index.js"
  },
  "author": "",
  "license": "ISC",
  "dependencies": {
    "express": "^4.16.4"
  }
}

---------------------------------------------------------------------------------------------------------------------
----------------------------------------------------- /index.js -----------------------------------------------------
---------------------------------------------------------------------------------------------------------------------

// 160202034 - Ata Gülalan
// 160202015 - Oğuzhan Türker

var express = require('express')
var app = express()
var fs = require('fs')

app.post('/postScore/:name/:score', function (req, res) {
  fs.readFile("enyüksekskor.txt", "utf8", function(err, data){
    if(err) throw err

    let oldJSON = JSON.parse(data);
    oldJSON.scores.push({
      "name": req.params.name,
      "score": req.params.score
    })

    fs.writeFile("enyüksekskor.txt", JSON.stringify(oldJSON), function(err) {
      if(err) {
        return console.log(err);
      }
      res.sendStatus(200)
    });
  }); 
})

app.get('/getScores', function (req, res) {
  fs.readFile("enyüksekskor.txt", "utf8", function(err, data){
    if(err) throw err
    res.send(data)
  });
})

app.use('/', express.static('public'))
app.listen(4540)

-----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------- /enyüksekskor.txt -----------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------

{"scores":[]}

-----------------------------------------------------------------------------------------------------------------------
----------------------------------------------------- /.gitignore -----------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------

/node_modules
yarn.lock
package-lock.json

------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------- /public/index.html -----------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link rel="stylesheet" href="css/styles.css">
    <title>PuzzleJS</title>
</head>
<body>
    <div class="wrapper noselect">
        <div class="puzzle">
            <div class="grid">
            </div>
        </div>
        <div class="right">
            <div class="points">
                <span id="points">100</span><b>/</b>100
            </div>
            <label class="button">
                Select an Image
                <input type="file" onChange="readFile(this)"/>
            </label>
            <div class="button light" onClick="shuffle()">
                Shuffle!
            </div>
            <div class="top10">
                <h1>Best Scores</h1>
                <span id="scores"></span>
            </div>
        </div>
    </div>
    <script src="js/main.js"></script>
</body>
</html>

----------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------- /public/css/styles.css -----------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------

@import url("https://fonts.googleapis.com/css?family=Exo+2:300,400,500,600,700,800,900&subset=latin-ext");
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  font-family: 'Exo 2', sans-serif;
}

html {
  background: #2F2F2F;
}

html body .wrapper {
  width: 1000px;
  height: 640px;
  margin: calc(50vh - 320px) auto;
}

html body .right {
  width: 340px;
  height: 100%;
  float: right;
}

html body .right .button {
  height: 75px;
  line-height: 75px;
  background: #DC7F9B;
  color: white;
  font-weight: 700;
  font-size: 20pt;
  text-align: center;
  margin-bottom: 15px;
  border-radius: 50px;
  box-shadow: 0 3px 22px -5px rgba(0, 0, 0, 0.3);
  transition: 0.3s box-shadow, 0.3s transform;
  cursor: pointer;
  display: block;
  position: relative;
  overflow: hidden;
}

html body .right .button.disabled {
  background: gray !important;
  pointer-events: none;
}

html body .right .button.disabled:hover {
  transform: scale(1);
  box-shadow: 0 3px 44px -5px rgba(0, 0, 0, 0);
}

html body .right .button:hover {
  transform: scale(1.01);
  box-shadow: 0 3px 44px -5px rgba(0, 0, 0, 0.3);
}

html body .right .button.light {
  background: #94BFA7;
}

html body .right .button input {
  opacity: 0;
  cursor: pointer;
  position: absolute;
  left: -9999px;
  top: -9999px;
}

html body .right .points {
  color: white;
  font-size: 40pt;
  font-weight: 600;
  text-align: center;
  border-bottom: 4px solid #dc7f9b;
  width: 240px;
  margin: 30px auto 20px;
  padding-bottom: 5px;
}

html body .right .points b {
  padding: 0 5px;
}

html body .right .top10 h1 {
  width: 100%;
  text-align: center;
  padding: 10px;
  color: #F2E9DC;
  border-top: none;
  border-bottom: none;
}

html body .right .top10 #scores .score {
  border-radius: 20px;
  line-height: 40px;
  padding: 0 25px;
  font-size: 14pt;
  color: #2f2f2f;
  margin-bottom: 6px;
  text-align: center;
}

html body .right .top10 #scores .score:nth-child(1) {
  color: #FFB3BA;
}

html body .right .top10 #scores .score:nth-child(2) {
  color: #FFDFBA;
}

html body .right .top10 #scores .score:nth-child(3) {
  color: #FFFFBA;
}

html body .right .top10 #scores .score:nth-child(4) {
  color: #BAFFC9;
}

html body .right .top10 #scores .score:nth-child(5) {
  color: #BAE1FF;
}

html body .puzzle {
  width: 640px;
  height: 640px;
  background: transparent;
  border-radius: 3px;
  float: left;
  box-shadow: 0 3px 44px -5px rgba(0, 0, 0, 0.3);
  background: #111;
}

html body .puzzle .grid {
  position: relative;
}

html body .puzzle .grid .box {
  position: absolute;
  float: left;
  cursor: pointer;
  background: white;
  transition: 0.3s transform, 0.3s left, 0.3s top;
}

html body .puzzle .grid .box.correct {
  z-index: 1;
}

html body .puzzle .grid .box.selected {
  transform: scale(1.1);
  z-index: 3;
  box-shadow: 0 3px 44px -5px rgba(0, 0, 0, 0.3);
}

html body .puzzle .grid .box.lastSelected {
  z-index: 2;
}

/* https://stackoverflow.com/questions/826782/how-to-disable-text-selection-highlighting */
.noselect {
  -webkit-touch-callout: none;
  /* iOS Safari */
  -webkit-user-select: none;
  /* Safari */
  -khtml-user-select: none;
  /* Konqueror HTML */
  -moz-user-select: none;
  /* Firefox */
  -ms-user-select: none;
  /* Internet Explorer/Edge */
  user-select: none;
  /* Non-prefixed version, currently supported by Chrome and Opera */
}

------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------- /public/js/main.js -----------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------

$ = (q, e) => {
    let i = typeof e === "number" ? e : undefined;
    let o = typeof e === "object" ? e : undefined;
    let r = o ? o.querySelectorAll(q) : document.querySelectorAll(q);
    if(i!==undefined){
        return r[i];
    }else if(r.length===1){
        return r[0];
    }else{
        return r;
    }
}
HTMLElement.prototype.addClass = function(q){return this.classList ? this.classList.add(q) : this.className += ' ' + q;}
HTMLElement.prototype.removeClass = function(q){return this.classList ? this.classList.remove(q) : this.className = this.className.replace(new RegExp('(^|\\b)' + q.split(' ').join('|') + '(\\b|$)', 'gi'), ' '); }
HTMLElement.prototype.forEach = function(q,s){return [this].forEach(q,s); }

let lockPosition = false,
    boxSize = 640,
    boxSlice = 4,
    threshold = 0,
    boxLength = boxSlice * boxSlice,
    pieceSize = boxSize / boxSlice,
    puzzle,
    imageParts,
    selected,
    imgObject,
    gameStart,
    gameOver,
    waitLoad,
    oldCorrect,
    points;

function toImageData(image) {
    let canvas = document.createElement('canvas'),
        context = canvas.getContext('2d');
    [canvas.width, canvas.height] = [image.width, image.height];
    context.clearRect(0, 0, image.width, image.height);
    context.drawImage(image, 0, 0);
    return context.getImageData(0, 0, image.width, image.height);
}

function equal(a, b, tolerance) {
    [a, b] = [toImageData(a), toImageData(b)];
    tolerance = tolerance || 0;
    for (var i = a.data.length; i--;)
        if (a.data[i] !== b.data[i] && Math.abs(a.data[i] - b.data[i]) > tolerance) return false;
    return true;
}

// RESETS GLOBAL VARIABLES TO THEIR INITIAL STATE & PREPARES BOXES
function resetGame() {
    $('.grid').innerHTML = "";
    [puzzle, imageParts, gameStart, gameOver, selected, oldCorrect, points] = ["", [], false, false, -1, 0, 0];
    imgObject = new Image();
    $(".button.light").removeClass("disabled");

    for (let i = 0; i < boxLength; i++) {
        let newBox = document.createElement('img');
        [newBox.className, newBox.style.width, newBox.style.height, newBox.draggable] = ['box', pieceSize, pieceSize, false]
        $('.grid').appendChild(newBox);
    }

    $(".box").forEach(function (el, i) {
        [el.style.top, el.style.left] = [(Math.floor(i / boxSlice) * (pieceSize)) + 'px', (i % boxSlice * (pieceSize)) + 'px'];
        el.addEventListener("click", function () {
            if (!gameOver) {
                if((lockPosition && !(el.className.indexOf("correct") > -1)) || !lockPosition){
                    if (selected === -1) {
                        this.addClass("selected");
                        selected = this;
                    } else {
                        swapBoxes([selected, this]);
                        boxControl();
                    }
                }
            }
        });
    });

    getTop5();
}

// https://stackoverflow.com/questions/19262141/resize-image-with-javascript-canvas-smoothly
// https://yellowpencil.com/blog/cropping-images-with-javascript/
function getImagePortion(imgObj, newWidth, newHeight, startX, startY, scaleX, scaleY) {
    let canvas = document.createElement('canvas'),
        ctx = canvas.getContext('2d'),
        oc = document.createElement('canvas'),
        octx = oc.getContext('2d');

    // DRAW ORIGINAL IMAGE TO BUFFER
    [oc.width, oc.height] = [imgObj.width, imgObj.height];
    octx.drawImage(imgObj, 0, 0, oc.width, oc.height);

    newWidth = newWidth === "oc" ? oc.width : newWidth;
    newHeight = newHeight === "oc" ? oc.height : newHeight;
    scaleX = scaleX ? scaleX : newWidth;
    scaleY = scaleY ? scaleY : newHeight;

    [canvas.width, canvas.height] = [scaleX, scaleY];

    // FOR A CRISP IMAGE
    ctx.imageSmoothingEnabled = false;

    ctx.drawImage(oc, startX, startY, newWidth, newHeight, 0, 0, scaleX, scaleY);
    return canvas.toDataURL();
}

// TRIGGERED WHEN IMAGE IS FULLY LOADED
function onImgLoaded(resized) {
    if (waitLoad != null) clearTimeout(waitLoad);
    if (!imgObject.complete) {
        waitLoad = setTimeout(function () {
            onImgLoaded(resized);
        }, 3);
    } else {
        if (!resized) {
            puzzle = getImagePortion(imgObject, "oc", "oc", 0, 0, boxSize, boxSize);
            imgObject = new Image();
            imgObject.src = puzzle;
            imgObject.onLoad = onImgLoaded(true);
        } else {
            fillImages();
            shuffle();
        }
    }
}

// READS FILE AND FILLS THE IMAGE WITH IT
function readFile(e) {
    resetGame();
    if (e.files && e.files[0]) {
        let fileReader = new FileReader();
        fileReader.addEventListener("load", function (e) {
            puzzle = e.target.result;
            imgObject.src = puzzle;
            imgObject.onLoad = onImgLoaded();
        });
        fileReader.readAsDataURL(e.files[0]);
    }
}

// SLICE IMAGE PARTS AND FILL BOXES WITH THEM
function fillImages() {
    $(".box").forEach(function (el, i) {
        let portion = getImagePortion(
            imgObject, // imgObj
            pieceSize, // newWidth
            pieceSize, // newHeight
            (i % boxSlice) * pieceSize, // startX
            Math.floor(i / boxSlice) * pieceSize // startY
        );
        el.src = portion;
        imageParts.push(el);
    });
    gameStart = true;
}

function changePoints(correctness) {
    let balance = 0;
    if (correctness === 0) {
        balance = -4;
    } else if (correctness < 0) {
        balance = ~~(correctness * 30);
    } else if (correctness > 0) {
        $(".button.light").addClass("disabled")
        balance = ~~(correctness * 6.25);
    }
    points += balance
    points = points > 100 ? 100 : points < 0 ? 0 : points
    $("#points").innerHTML = points;
}

function boxControl() {
    // WAIT IMAGE RENDER TO BE READY
    let isLoaded = true;
    for (let i = 0; i < imageParts.length; i++) {
        if (imageParts[i].width === 0) {
            isLoaded = false;
            break;
        }
    }
    if (!isLoaded) {
        setTimeout(function () {
            boxControl();
        }, 1)
    } else {
        let correctBoxCount = 0;

        $(".box").forEach(function (el, i) {
            let eqArray = [];
            for (let j = 0; j < boxLength; j++) eqArray.push(equal(el, imageParts[j], threshold));
            if (eqArray[i]) correctBoxCount++;
            eqArray[i] ? imageParts[i].addClass("correct") : imageParts[i].removeClass("correct")
        });

        changePoints(correctBoxCount - oldCorrect);
        oldCorrect = correctBoxCount;

        if (correctBoxCount === boxLength) {
            gameOver = true;
            gameStart = false;
            setTimeout(function () {
                saveScore();
            }, 500)
        }
    }
}

function swapBoxes(boxes) {
    [boxes[1].style.top, boxes[1].style.left, boxes[0].style.top, boxes[0].style.left] 
        = [boxes[0].style.top, boxes[0].style.left, boxes[1].style.top, boxes[1].style.left];
    boxes[0].removeClass("selected");
    $(".box").forEach(el => el.removeClass("lastSelected"));
    boxes[0].addClass("lastSelected");
    let [a, b] = [imageParts.findIndex(e => {
        return e === boxes[0];
    }), imageParts.findIndex(e => {
        return e === boxes[1];
    })];
    [imageParts[a], imageParts[b]] = [imageParts[b], imageParts[a]]
    // UNSELECT PIECE
    selected = -1;
}

//https://stackoverflow.com/questions/6274339/how-can-i-shuffle-an-array
function shuffle() {
    if (gameStart) {
        if (points === 0) {
            points = 0;
            oldCorrect = 0;
            for (let i = (boxLength) - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                swapBoxes([$(".box", i), $(".box", j)]);
            }
            // CONTROL
            boxControl();
        }
    }
}

function getTop5() {
    var http = new XMLHttpRequest();
    http.open('GET', '/getScores', true);
    http.onreadystatechange = function () {
        if (http.readyState == 4 && http.status == 200) {
            let parsed = JSON.parse(http.responseText);
            parsed.scores.sort((a, b) => b.score - a.score)
            $("#scores").innerHTML = "";
            for (let i = 0; i < (parsed.scores.length > 5 ? 5 : parsed.scores.length); i++) {
                let newScore = document.createElement('div');
                newScore.className = 'score';
                newScore.innerHTML = parsed.scores[i].name + " <b>" + parsed.scores[i].score + "</b>"
                $("#scores").appendChild(newScore);
            }
        }
    }
    http.send();
}

function saveScore() {
    let name = prompt("Please enter your name");
    name = name ? encodeURI(name) : "Anonymous";
    var http = new XMLHttpRequest();
    http.open('POST', '/postScore/' + name + '/' + points, true);
    http.onreadystatechange = function () {
        if (http.readyState == 4 && http.status == 200) {
            getTop5();
        }
    }
    http.send();
}

resetGame();